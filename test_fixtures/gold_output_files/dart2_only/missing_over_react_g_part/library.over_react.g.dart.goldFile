//@dart=2.11
// GENERATED CODE - DO NOT MODIFY BY HAND

// ignore_for_file: deprecated_member_use_from_same_package, unnecessary_null_in_if_null_operators, prefer_null_aware_operators
part of 'library.dart';

// **************************************************************************
// OverReactBuilder (package:over_react/src/builder.dart)
// **************************************************************************

// React component factory implementation.
//
// Registers component implementation and links type meta to builder factory.
final $BasicPartOfLibComponentFactory = registerComponent(
  () => _$BasicPartOfLibComponent(),
  builderFactory: _$BasicPartOfLib,
  componentClass: BasicPartOfLibComponent,
  isWrapper: false,
  parentType: null,
);

abstract class _$BasicPartOfLibPropsAccessorsMixin
    implements _$BasicPartOfLibProps {
  @override
  Map get props;

  /// <!-- Generated from [_$BasicPartOfLibProps.basicProp] -->
  @override
  String get basicProp =>
      (props[_$key__basicProp___$BasicPartOfLibProps] ?? null) as String;

  /// <!-- Generated from [_$BasicPartOfLibProps.basicProp] -->
  @override
  set basicProp(String value) =>
      props[_$key__basicProp___$BasicPartOfLibProps] = value;
  /* GENERATED CONSTANTS */
  static const PropDescriptor _$prop__basicProp___$BasicPartOfLibProps =
      PropDescriptor(_$key__basicProp___$BasicPartOfLibProps);
  static const String _$key__basicProp___$BasicPartOfLibProps =
      'BasicPartOfLibProps.basicProp';

  static const List<PropDescriptor> $props = [
    _$prop__basicProp___$BasicPartOfLibProps
  ];
  static const List<String> $propKeys = [
    _$key__basicProp___$BasicPartOfLibProps
  ];
}

const PropsMeta _$metaForBasicPartOfLibProps = PropsMeta(
  fields: _$BasicPartOfLibPropsAccessorsMixin.$props,
  keys: _$BasicPartOfLibPropsAccessorsMixin.$propKeys,
);

class BasicPartOfLibProps extends _$BasicPartOfLibProps
    with _$BasicPartOfLibPropsAccessorsMixin {
  static const PropsMeta meta = _$metaForBasicPartOfLibProps;
}

_$$BasicPartOfLibProps _$BasicPartOfLib([Map backingProps]) =>
    _$$BasicPartOfLibProps(backingProps);

// Concrete props implementation.
//
// Implements constructor and backing map, and links up to generated component factory.
class _$$BasicPartOfLibProps extends _$BasicPartOfLibProps
    with _$BasicPartOfLibPropsAccessorsMixin
    implements BasicPartOfLibProps {
  // This initializer of `_props` to an empty map, as well as the reassignment
  // of `_props` in the constructor body is necessary to work around a DDC bug: https://github.com/dart-lang/sdk/issues/36217
  _$$BasicPartOfLibProps(Map backingMap) : this._props = {} {
    this._props = backingMap ?? {};
  }

  /// The backing props map proxied by this class.
  @override
  Map get props => _props;
  Map _props;

  /// Let `UiProps` internals know that this class has been generated.
  @override
  bool get $isClassGenerated => true;

  /// The `ReactComponentFactory` associated with the component built by this class.
  @override
  ReactComponentFactoryProxy get componentFactory =>
      super.componentFactory ?? $BasicPartOfLibComponentFactory;

  /// The default namespace for the prop getters/setters generated for this class.
  @override
  String get propKeyNamespace => 'BasicPartOfLibProps.';
}

// Concrete component implementation mixin.
//
// Implements typed props/state factories, defaults `consumedPropKeys` to the keys
// generated for the associated props class.
class _$BasicPartOfLibComponent extends BasicPartOfLibComponent {
  @override
  _$$BasicPartOfLibProps typedPropsFactory(Map backingMap) =>
      _$$BasicPartOfLibProps(backingMap);

  /// Let `UiComponent` internals know that this class has been generated.
  @override
  bool get $isClassGenerated => true;

  @override
  String get displayName => 'BasicPartOfLib';

  /// The default consumed props, taken from _$BasicPartOfLibProps.
  /// Used in `*ConsumedProps` methods if [consumedProps] is not overridden.
  @override
  final List<ConsumedProps> $defaultConsumedProps = const [
    _$metaForBasicPartOfLibProps
  ];
}
