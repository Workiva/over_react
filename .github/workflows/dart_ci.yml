name: Dart CI

on:
  push:
    branches:
      - 'master'
      - 'test_consume_**'
    tags:
      - "**"
  pull_request:
    branches:
      - '**'

permissions:
  contents: write
  id-token: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sdk: [ 2.19.6, 3.4.4, main ]
    steps:
      - uses: actions/checkout@v4
      - id: setup-dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ matrix.sdk }}

      - name: Print Dart SDK version
        run: dart --version

      - name: Delete Dart-2-only files when running on Dart 3
        run: |
          DART_VERSION="${{ steps.setup-dart.outputs.dart-version }}"
          if [[ "$DART_VERSION" =~ ^3 ]]; then
            ./tool/delete_dart_2_only_files.sh
          fi

      - id: install
        name: Install dependencies
        run: dart pub get

      - name: Validate dependencies
        run: dart run dependency_validator
        if: always() && steps.install.outcome == 'success'

      - name: Verify formatting
        run: dart run dart_dev format --check
        # Only run on one sdk version in case there are conflicts
        if: always() && matrix.sdk == '2.19.6' && steps.install.outcome == 'success'

      # Analyze before generated files are created to verify that component boilerplate analysis is "clean" without the need for building
      - name: Analyze example source (pre-build)
        run: |
          # Analyze lib to ensure public APIs don't depend on build-to-cache files,
          # which could cause analysis issues for consumers who haven't run a build yet.
          dart analyze lib
          dart analyze example/boilerplate_versions
        if: always() && steps.install.outcome == 'success'

      - id: build
        timeout-minutes: 6
        name: Build generated files / precompile DDC assets
        run: |
          dart run build_runner build --delete-conflicting-outputs -o ddc_precompiled
        if: always() && steps.install.outcome == 'success'

      - name: Verify that generated files are up-to-date
        run: |
          if [ ${{ matrix.sdk }} = '2.19.6' ]; then
            git diff --exit-code
          else
            # Don't check these generated files for other SDKs, since they may generate differently
            # due to different resolved dependencies.
            git diff --exit-code -- ":(exclude)test/over_react/component_declaration/redux_component_test/test_reducer.g.dart"
          fi
        if: always() && steps.install.outcome == 'success' && steps.install.build == 'success'

      # Analyze again after generated files are created to verify that those generated classes don't cause analysis errors
      - name: Analyze project source (post-build)
        run: dart analyze
        if: always() && steps.install.outcome == 'success' && steps.build.outcome == 'success'

      - name: Run tests (VM)
        # Can't use build_runner (which dart_dev uses if you depend on it) to run VM tests, since we get the error:
        #    Unable to spawn isolate: /â€¦/build_runner_testRU6M77/.packages: Error: Problem in packages configuration file: Unexpected character
        run: |
          DART_VERSION="${{ steps.setup-dart.outputs.dart-version }}"
          TEST_ARGS=""
          if [[ "$DART_VERSION" =~ ^3 ]]; then
            TEST_ARGS="--exclude-tags=dart-2-only"
          fi
          dart test -P vm "$TEST_ARGS"
        if: always() && steps.install.outcome == 'success' && steps.build.outcome == 'success'

      - name: Run tests (DDC)
        run: dart test --precompiled ddc_precompiled -P dartdevc
        if: always() && steps.install.outcome == 'success' && steps.build.outcome == 'success'

      - name: Run tests (dart2js)
        run: dart run dart_dev test --build-args="-r" -P dart2js
        if: always() && steps.install.outcome == 'success' && steps.build.outcome == 'success'

      - uses: anchore/sbom-action@v0
        with:
          path: ./
          format: cyclonedx-json

  validate_analyzer:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sdk: [ 2.19.6, 3.4.4, main ]
        analyzer:
          # We only have one version currently, but we'll leave this CI step in place
          # for the next time we need to support multiple analyzer versions.
          - ^5.1.0
    steps:
      - uses: actions/checkout@v4
      - id: setup-dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ matrix.sdk }}

      - name: Print Dart SDK version
        run: dart --version

      - name: Delete Dart-2-only files when running on Dart 3
        run: |
          DART_VERSION="${{ steps.setup-dart.outputs.dart-version }}"
          if [[ "$DART_VERSION" =~ ^3 ]]; then
            ./tool/delete_dart_2_only_files.sh
          fi

      - name: Update analyzer constraint to ${{ matrix.analyzer }} and validate `dart pub get` can resolve
        id: resolve
        run: |
          dart tool/set_analyzer_constraint.dart "${{ matrix.analyzer }}"
          # Show the updated version constraint
          git diff pubspec.yaml
          dart pub get

      - name: Analyze package source
        run: dart analyze .

      - name: Verify builder runs without errors
        run: dart run build_runner build --build-filter='**.dart' --delete-conflicting-outputs

      - name: Run builder tests
        run: |
          DART_VERSION="${{ steps.setup-dart.outputs.dart-version }}"
          TEST_ARGS=""
          if [[ "$DART_VERSION" =~ ^3 ]]; then
            TEST_ARGS="--exclude-tags=dart-2-only"
          fi
          dart test -p vm "$TEST_ARGS" -- test/vm_tests/builder

  analyzer_plugin:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./tools/analyzer_plugin
    strategy:
      fail-fast: false
      matrix:
        sdk: [ 2.19.6, 3.4.4, main ]
    steps:
      - uses: actions/checkout@v4
      - id: setup-dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ matrix.sdk }}

      - name: Print Dart SDK version
        run: dart --version

      - name: Delete Dart-2-only files when running on Dart 3
        run: |
          DART_VERSION="${{ steps.setup-dart.outputs.dart-version }}"
          if [[ "$DART_VERSION" =~ ^3 ]]; then
            (cd ../.. && ./tool/delete_dart_2_only_files.sh)
          fi

      - id: link
        name: Override over_react dependency with local path
        run: cd ../.. && dart pub get && dart tool/travis_link_plugin_deps.dart

      - id: install
        name: Install dependencies
        run: dart pub get
        if: always() && steps.link.outcome == 'success'

      - name: Validate dependencies
        run: dart run dependency_validator
        if: always() && steps.install.outcome == 'success'

      - name: Analyze
        run: dart run dart_dev analyze
        if: always() && steps.install.outcome == 'success'

      - name: Verify formatting
        run: dart run dart_dev format --check
        if: always() && matrix.sdk == '2.7.2' && steps.install.outcome == 'success'

      - name: Run tests
        run: dart run dart_dev test
        if: always() && steps.install.outcome == 'success'
